generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Roles {
  ADMIN
  MANAGER
  SALES
  VIEWER
}
model User {
  id Int @id @default(autoincrement())
  role Roles @default(VIEWER)
  username String @db.VarChar(100) @unique
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  deletedAt DateTime? @map("deleted_at")

  customers Customer[] @relation("userCustomers")
  contacts Contact[] @relation("contactUser")
  leads Lead[] @relation("leadUser")
  opportunities Opportunity[] @relation("userOpportunity")
  taskAssigned Task[] @relation("taskAssigned")
  taskCreator Task[] @relation("taskCreator")
  notes Note[] @relation("noteUser")
  activities Activity[] @relation("activityUser")
    
  @@map("users")
}

model Customer{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  address String? 
  company String?
  createdByUserId Int @map("created_by_user_id") 
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  user User @relation("userCustomers" ,fields: [createdByUserId], references: [id], onDelete: Restrict)
  contact Contact[] @relation("customerContact")
  lead Lead[] @relation("customerLead")
  opportunities Opportunity[] @relation("customerOpportunity")
  task Task[] @relation("taskCustomer")
  note Note[] @relation("noteCustomer")
  activity Activity[] @relation("activityCustomer")

  @@map("customers")
}

model Contact {
  id Int @id @default(autoincrement())
  customerId Int @map("customer_id")
  firstName String @map("first_name") @db.VarChar(100) 
  lastName String? @map("last_name") @db.VarChar(100)
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  position String? @db.VarChar(50)
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer @relation("customerContact" ,fields: [customerId], references: [id], onDelete: Cascade)
  user User @relation("contactUser" ,fields: [createdByUserId], references: [id], onDelete: Cascade)
  note Note[] @relation("noteContact")
  activity Activity[] @relation("activityContact")


  @@map("contacts")
}

enum LeadStatus{
  NEW
  CONTACTED
  WON
  LOST
  CONVERTED
}

model Lead{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) 
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  status LeadStatus @default(NEW)
  createdByUserId Int @map("created_by_user_id")
  customerId Int? @map("customer_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("customerLead" ,fields: [customerId],references: [id], onDelete: SetNull)
  user User @relation("leadUser" ,fields: [createdByUserId], references: [id], onDelete: Restrict)
  opportunity Opportunity? @relation("leadOpportunity")
  task Task[] @relation("taskLead")
  note Note[] @relation("noteLead")
  activity Activity[] @relation("activityLead")

  @@map("leads")
}

enum OpportunityStage{
  QUALIFICATION
  NEED_ANALYSIS
  PROPOSAL_PRESENTATION
  NEGOTIATION
  WON
  LOST
}

model Opportunity{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  amount Decimal @db.Decimal(15,2)
  stage OpportunityStage @default(QUALIFICATION)
  closeDate DateTime? @map("close_date")
  description String? @db.Text
  customerId Int? @map("customer_id")
  leadId Int? @map("lead_id") @unique
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("customerOpportunity", fields: [customerId], references: [id], onDelete: SetNull)
  lead Lead? @relation("leadOpportunity", fields: [leadId], references: [id], onDelete: SetNull)
  user User @relation("userOpportunity", fields: [createdByUserId], references: [id], onDelete: Restrict)
  task Task[] @relation("taskOpportunity")
  note Note[] @relation("noteOpportunity")
  activity Activity[] @relation("activityOpportunity")


  @@map("opportunities")
}

enum TaskStatus{
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
enum TaskPriority{
  LOW
  MEDIUM
  HIGH
}

model Task{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  description String? @db.Text
  status TaskStatus @default(PENDING)
  priority TaskPriority @default(LOW)
  dueDate DateTime @map("due_date")
  completedAt DateTime? @map("completed_at")
  customerId Int? @map("customer_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  assignedToUserId Int @map("assigned_to_user_id")
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("taskCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  lead Lead? @relation("taskLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("taskOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  assignedToUser User @relation("taskAssigned", fields: [assignedToUserId], references: [id], onDelete: Restrict)
  creator User @relation("taskCreator", fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("tasks")
}

model Note{
  id Int @id @default(autoincrement())
  content String @db.Text
  customerId Int? @map("customer_id")
  contactId Int? @map("contact_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("noteCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  contact Contact? @relation("noteContact", fields: [contactId], references: [id], onDelete: SetNull)
  lead Lead? @relation("noteLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("noteOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  createdByUser User @relation("noteUser", fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("notes") 
}

enum ActivityType{
  CALL
  EMAIL
  MEETING
  NOTE
}

model Activity{
  id Int @id @default(autoincrement())
  type ActivityType @default(NOTE)
  subject String @db.VarChar(255)
  content String @db.Text
  createdByUserId Int @map("created_by_user_id")
  customerId Int? @map("customer_id")
  contactId Int? @map("contact_id")
  leadId Int? @map("lead_id")
  opportunityId Int? @map("opportunity_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("activityCustomer", fields: [customerId], references: [id], onDelete: SetNull)
  contact Contact? @relation("activityContact", fields: [contactId], references: [id], onDelete: SetNull)
  lead Lead? @relation("activityLead", fields: [leadId], references: [id], onDelete: SetNull)
  opportunity Opportunity? @relation("activityOpportunity", fields: [opportunityId], references: [id], onDelete: SetNull)
  createdByUser User @relation("activityUser", fields: [createdByUserId], references: [id], onDelete: Restrict)

  @@map("activities")
}