generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  username String @db.VarChar(100) @unique
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customers Customer[] @relation("userCustomers")
  contact Contact[] @relation("contactUser")
  lead Lead[] @relation("leadUser")
  opportunities Opportunity[] @relation("userOpportunity")
    
  @@map("users")
}

model Customer{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  email String? @db.VarChar(100) @unique
  phone String? @db.VarChar(20)
  address String? 
  company String?
  createdByUserId Int @map("created_by_user_id") 
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt
  user User @relation("userCustomers" ,fields: [createdByUserId], references: [id], onDelete: Cascade)
  contact Contact[]
  lead Lead[]
  opportunities Opportunity[] @relation("customerOpportunity")

  @@map("customers")
}

model Contact {
  id Int @id @default(autoincrement())
  customerId Int @map("customer_id")
  firstName String @map("first_name") @db.VarChar(100) 
  lastName String? @map("last_name") @db.VarChar(100)
  email String? @db.VarChar(100) @unique
  phone String? @db.VarChar(20)
  position String? @db.VarChar(50)
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user User @relation("contactUser" ,fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

enum LeadStatus{
  NEW
  CONTACTED
  WON
  LOST
}

model Lead{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100) 
  email String? @db.VarChar(100)
  phone String? @db.VarChar(20)
  status LeadStatus @default(NEW)
  createdByUserId Int @map("created_by_user_id")
  customerId Int? @map("customer_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation(fields: [customerId],references: [id], onDelete: SetNull)
  user User @relation("leadUser" ,fields: [createdByUserId], references: [id], onDelete: Cascade)
  opportunity Opportunity? @relation("leadOpportunity")

  @@map("leads")
}

enum OpportunityStage{
  QUALIFICATION
  NEED_ANALYSIS
  PROPOSAL_PRESENTATION
  NEGOTIATION
  WON
  LOST
}

model Opportunity{
  id Int @id @default(autoincrement())
  name String @db.VarChar(255)
  amount Decimal @db.Decimal(10,2)
  stage OpportunityStage @default(QUALIFICATION)
  closeDate DateTime? @map("close_date")
  description String? @db.Text
  customerId Int? @map("customer_id")
  leadId Int? @map("lead_id") @unique
  createdByUserId Int @map("created_by_user_id")
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  customer Customer? @relation("customerOpportunity", fields: [customerId], references: [id], onDelete: SetNull)
  lead Lead? @relation("leadOpportunity", fields: [leadId], references: [id], onDelete: SetNull)
  user User @relation("userOpportunity", fields: [createdByUserId], references: [id], onDelete: Cascade)

  @@map("opportunities")
}